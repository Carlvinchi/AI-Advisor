# -*- coding: utf-8 -*-
"""Copy of AI_Advisor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a5HpNLaBU8-wOZa3N5wqShkZS5dJrRDq
"""

from joblib import dump, load
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Trees Approach
from sklearn.tree import DecisionTreeClassifier
# Ensemble Approach
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier

#import the data
from google.colab import drive
drive.mount('/content/drive')

#importing data
train_path = '/content/drive/MyDrive/data/large_data.csv'
test_path = '/content/drive/MyDrive/data/student_data.csv'

train_df = pd.read_csv(train_path)
train_df.info()

train_df.head(10)

col_list = list(train_df)
print(col_list)

#list of columns
['What is your cumulative weighted average(CWA) / grade point average(GPA)?', 'Were you able to increase your CWA/GPA last semester?', 'Do you have a personal time table?', 'How many times do you study every week?', 'Do you always understand what you are taught at lectures?', 'How often have you been attending lectures?', 'Advice']

#creating a dictionary for the labels
test_df = pd.read_csv(test_path)
my_advice = {}
k = 0
for i in test_df['Advice']:
  my_advice[k]= i
  k+=1
print(my_advice)

{0: 'Increase study time and ask for help when facing challenges', 1: "Aim higher and don't be complacent ", 2: 'Increase study time and ask for help when facing challenges', 3: 'Increase study time and ask for help when facing challenges', 4: 'Seek for a discipline and serious academic group', 5: 'Increase study time and ask for help when facing challenges', 6: 'Increase study time and ask for help when facing challenges', 7: 'Increase study time and ask for help when facing challenges', 8: 'Increase study time and ask for help when facing challenges', 9: 'Increase study time and ask for help when facing challenges', 10: 'Seek for a discipline and serious academic group', 11: "Aim higher and don't be complacent ", 12: 'Seek for a discipline and serious academic group', 13: "Aim higher and don't be complacent ", 14: 'Increase study time and ask for help when facing challenges', 15: 'Seek for a discipline and serious academic group', 16: "Aim higher and don't be complacent ", 17: 'Increase study time and ask for help when facing challenges', 18: 'Increase study time and ask for help when facing challenges', 19: 'Increase study time and ask for help when facing challenges', 20: 'Increase study time and ask for help when facing challenges', 21: 'Seek for a discipline and serious academic group', 22: 'Increase study time and ask for help when facing challenges', 23: "Aim higher and don't be complacent ", 24: 'Increase study time and ask for help when facing challenges', 25: 'Increase study time and ask for help when facing challenges', 26: 'Increase study time and ask for help when facing challenges', 27: 'Increase study time and ask for help when facing challenges', 28: "Aim higher and don't be complacent ", 29: 'Increase study time and ask for help when facing challenges', 30: 'Increase study time and ask for help when facing challenges', 31: 'Increase study time and ask for help when facing challenges', 32: 'Seek for a discipline and serious academic group', 33: 'Increase study time and ask for help when facing challenges', 34: 'Increase study time and ask for help when facing challenges', 35: "Aim higher and don't be complacent ", 36: 'Increase study time and ask for help when facing challenges', 37: 'Increase study time and ask for help when facing challenges', 38: "Aim higher and don't be complacent ", 39: "Aim higher and don't be complacent ", 40: 'Increase study time and ask for help when facing challenges', 41: 'Increase study time and ask for help when facing challenges', 42: 'Increase study time and ask for help when facing challenges', 43: "Aim higher and don't be complacent ", 44: "Aim higher and don't be complacent ", 45: 'Increase study time and ask for help when facing challenges', 46: 'Seek for a discipline and serious academic group', 47: 'Seek for a discipline and serious academic group', 48: "Aim higher and don't be complacent ", 49: 'Increase study time and ask for help when facing challenges', 50: 'Increase study time and ask for help when facing challenges', 51: 'Seek for a discipline and serious academic group', 52: 'Seek for a discipline and serious academic group', 53: 'Seek for a discipline and serious academic group', 54: 'Increase study time and ask for help when facing challenges', 55: 'Seek for a discipline and serious academic group', 56: 'Seek for a discipline and serious academic group', 57: 'Seek for a discipline and serious academic group', 58: 'Increase study time and ask for help when facing challenges', 59: 'Seek for a discipline and serious academic group', 60: 'Increase study time and ask for help when facing challenges', 61: 'Increase study time and ask for help when facing challenges', 62: 'Seek for a discipline and serious academic group', 63: 'Increase study time and ask for help when facing challenges', 64: 'Seek for a discipline and serious academic group', 65: "Aim higher and don't be complacent ", 66: "Aim higher and don't be complacent ", 67: 'Seek for a discipline and serious academic group', 68: "Aim higher and don't be complacent ", 69: 'Seek for a discipline and serious academic group', 70: 'Increase study time and ask for help when facing challenges', 71: 'Increase study time and ask for help when facing challenges', 72: 'Increase study time and ask for help when facing challenges', 73: 'Seek for a discipline and serious academic group', 74: 'Increase study time and ask for help when facing challenges', 75: 'Increase study time and ask for help when facing challenges', 76: 'Increase study time and ask for help when facing challenges', 77: "Aim higher and don't be complacent ", 78: 'Increase study time and ask for help when facing challenges', 79: 'Seek for a discipline and serious academic group', 80: 'Seek for a discipline and serious academic group', 81: "Aim higher and don't be complacent ", 82: "Aim higher and don't be complacent ", 83: 'Increase study time and ask for help when facing challenges', 84: 'Increase study time and ask for help when facing challenges', 85: 'Increase study time and ask for help when facing challenges', 86: 'Seek for a discipline and serious academic group', 87: 'Seek for a discipline and serious academic group', 88: 'Increase study time and ask for help when facing challenges', 89: "Aim higher and don't be complacent ", 90: "Aim higher and don't be complacent ", 91: 'Increase study time and ask for help when facing challenges', 92: 'Increase study time and ask for help when facing challenges', 93: 'Seek for a discipline and serious academic group', 94: 'Increase study time and ask for help when facing challenges', 95: "Aim higher and don't be complacent ", 96: 'Increase study time and ask for help when facing challenges', 97: 'Increase study time and ask for help when facing challenges', 98: 'Seek for a discipline and serious academic group', 99: 'Seek for a discipline and serious academic group', 100: "Aim higher and don't be complacent ", 101: 'Increase study time and ask for help when facing challenges', 102: 'Increase study time and ask for help when facing challenges', 103: 'Increase study time and ask for help when facing challenges', 104: "Aim higher and don't be complacent ", 105: 'Seek for a discipline and serious academic group', 106: 'Increase study time and ask for help when facing challenges', 107: 'Seek for a discipline and serious academic group', 108: 'Increase study time and ask for help when facing challenges', 109: 'Increase study time and ask for help when facing challenges', 110: 'Increase study time and ask for help when facing challenges', 111: "Aim higher and don't be complacent ", 112: 'Increase study time and ask for help when facing challenges', 113: 'Increase study time and ask for help when facing challenges', 114: "Aim higher and don't be complacent ", 115: "Aim higher and don't be complacent ", 116: 'Increase study time and ask for help when facing challenges', 117: "Aim higher and don't be complacent ", 118: 'Increase study time and ask for help when facing challenges', 119: 'Increase study time and ask for help when facing challenges', 120: 'Increase study time and ask for help when facing challenges', 121: "Aim higher and don't be complacent ", 122: "Aim higher and don't be complacent ", 123: "Aim higher and don't be complacent ", 124: 'Increase study time and ask for help when facing challenges', 125: 'Seek for a discipline and serious academic group', 126: 'Increase study time and ask for help when facing challenges', 127: 'Seek for a discipline and serious academic group', 128: 'Seek for a discipline and serious academic group', 129: 'Increase study time and ask for help when facing challenges', 130: 'Increase study time and ask for help when facing challenges', 131: 'Increase study time and ask for help when facing challenges', 132: 'Increase study time and ask for help when facing challenges', 133: 'Increase study time and ask for help when facing challenges', 134: 'Increase study time and ask for help when facing challenges'}

#replacing some categorical columns with numberic columns
train_df = pd.get_dummies(data = train_df, columns =['Were you able to increase your CWA/GPA last semester?','Do you have a personal time table?','Do you always understand what you are taught at lectures?','How often have you been attending lectures?'] )

train_df.head(10)

#change some numeric columns to integers or float types
#train_df.astype({'Dependents': 'int64','Loan_Amount_Term': 'int64','ApplicantIncome': 'float64'}).dtypes

#creating data for ML
X = train_df.drop(['Advice'], axis = 1)

y = train_df['Advice']

#splitting data into training and validation samples
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

#Training random forest classifier
rft = RandomForestClassifier(n_estimators=10)
rft.fit(X_train,y_train)

# Trained Model Evaluation on Validation Dataset
confidence = rft.score(X_test, y_test)
# Validation Data Prediction
preds = rft.predict(X_test)
# Model Validation Accuracy
accuracy = accuracy_score(y_test, preds)
# Model Confusion Matrix
conf_mat = confusion_matrix(y_test, preds)
# Model Classification Report
clf_report = classification_report(y_test, preds)

print(confidence)
print('\n')
print(accuracy)
print('\n')
print(conf_mat)
print('\n')
print(clf_report)

['What is your cumulative weighted average(CWA) / grade point average(GPA)?','How many times do you study every week?', 'Were you able to increase your CWA/GPA last semester?', 'Do you have a personal time table?', 'Do you always understand what you are taught at lectures?', 'How often have you been attending lectures?']

#new_im = [67.50, 2, 0, 1, 1, 0, 1, 0, 0, 0, 1]

param = ['What is your cumulative weighted average(CWA) / grade point average(GPA)?','How many times do you study every week?', 'Were you able to increase your CWA/GPA last semester?', 'Do you have a personal time table?', 'Do you always understand what you are taught at lectures?', 'How often have you been attending lectures?']

#Assume inputs
#input_vals = ['67.50','Yes','No','2','No','seldom']

X.info()

#preprocessing model to make single predictions
myInput = []
for i in range(0,11):
    myInput.append(0)
print(myInput)

input_vals = []

for i in range(0,len(param)):
  print(param[i])
  vals =input('Enter: ')
  #store input in a list
  input_vals.append(vals)

print(input_vals)

my_im_dict = {}
k = 0
for i in input_vals:
  my_im_dict[k]= i
  k+=1

print(my_im_dict)


# preprocessing user input for the machine model
for i in range(0,len(myInput)):
    if i < 2:
      myInput[i] = my_im_dict[i]

    elif i == 2:
      if my_im_dict[i] == "No": myInput[i] = 1
      else: myInput[i+1] = 1
      

    elif i == 3:
      if my_im_dict[i] == "No": myInput[i+1] = 1
      else: myInput[i+2] = 1
      
      

    elif i == 4:
      if my_im_dict[i] == "No": myInput[i+2] = 1
      else: myInput[i+3] = 1
      
      

    elif i == 5:
      if my_im_dict[i] == "seldom": myInput[i+3] = 1
      elif my_im_dict[i] == "often" : myInput[i+4] = 1
      else: myInput[i+5] = 1

print(myInput)


input_mat = [myInput]
pred1 = rft.predict(input_mat)
print(pred1)

#Training decision tree classifier
dt = DecisionTreeClassifier(criterion='entropy')
dt.fit(X_train,y_train)

# Trained Model Evaluation on Validation Dataset
confidence = dt.score(X_test, y_test)
# Validation Data Prediction
preds = dt.predict(X_test)
# Model Validation Accuracy
accuracy = accuracy_score(y_test, preds)
# Model Confusion Matrix
conf_mat = confusion_matrix(y_test, preds)
# Model Classification Report
clf_report = classification_report(y_test, preds)

print(confidence)
print('\n')
print(accuracy)
print('\n')
print(conf_mat)
print('\n')
print(clf_report)

input_mat = [myInput]
pred2 = dt.predict(input_mat)
print(pred2)

#Training KNN classifier
#KNN Approach
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5,metric='minkowski',p=2)
knn.fit(X_train,y_train)

# Trained Model Evaluation on Validation Dataset
confidence = knn.score(X_test, y_test)
# Validation Data Prediction
preds = knn.predict(X_test)
# Model Validation Accuracy
accuracy = accuracy_score(y_test, preds)
# Model Confusion Matrix
conf_mat = confusion_matrix(y_test, preds)
# Model Classification Report
clf_report = classification_report(y_test, preds)

print(confidence)
print('\n')
print(accuracy)
print('\n')
print(conf_mat)
print('\n')
print(clf_report)

input_mat = [myInput]
pred4 = knn.predict(input_mat)
print(pred4)